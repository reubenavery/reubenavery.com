<?php

/**
 * @file
 * A pluggable client implementation for the OpenID Connect protocol.
 */

/**
 * Base path where to login providers can redirect in the OAuth2 flow.
 */
define('OPENID_CONNECT_REDIRECT_PATH_BASE', 'openid-connect');

/**
 * Implements hook_menu().
 */
function openid_connect_menu() {
  $items = array();
  $items['admin/config/services/openid-connect'] = array(
    'title' => 'OpenID Connect',
    'description' => 'Config OpenID Connect, choose active OpenID Connect clients etc.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('openid_connect_admin_form'),
    'access arguments' => array('configure openid clients'),
    'file' => 'includes/openid_connect.admin.inc',
  );
  $items[OPENID_CONNECT_REDIRECT_PATH_BASE . '/%'] = array(
    'title' => 'OpenID Connect redirect page',
    'page callback' => 'openid_connect_redirect_page',
    'page arguments' => array(1),
    'access callback' => 'openid_connect_redirect_access',
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission().
 */
function openid_connect_permission() {
  return array(
    'configure openid connect clients' => array(
      'title' => t('Configure OpenID Connect clients'),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function openid_connect_ctools_plugin_directory($module, $plugin) {
  if ($module == 'openid_connect') {
    return 'plugins/' . $plugin;
  }
}

/**
 * Implements hook_ctools_plugin_type().
 */
function openid_connect_ctools_plugin_type() {
  $plugins['openid_connect_client'] = array(
    'classes' => array('class'),
  );
  return $plugins;
}

/**
 * Returns the available OpenID Connect client plugins.
 */
function openid_connect_get_plugins($enabled_only = FALSE) {
  ctools_include('plugins');
  $plugins = ctools_get_plugins('openid_connect', 'openid_connect_client');
  $plugins_enabled = variable_get('openid_connect_clients_enabled', array());
  foreach ($plugins as $key => $plugin) {
    if (!class_exists($plugin['class']) || ($enabled_only && empty($plugins_enabled[$plugin['name']]))) {
      // Invalid class specified or client is not enabled and we only suppose to
      // return those that are active.
      unset($plugins[$key]);
      continue;
    }
  }
  uasort($plugins, 'ctools_plugin_sort');
  return $plugins;
}

/**
 * Implements hook_block_info().
 */
function openid_connect_block_info() {
  return array(
    'openid_connect_login' => array(
      'info' => t('OpenID Connect login'),
    ),
  );
}

/**
 * Implements hook_block_view().
 */
function openid_connect_block_view($delta = '') {
  if ($delta == 'openid_connect_login' && user_is_anonymous()) {
    return array(
      'subject' => t('Log in'),
      'content' => drupal_get_form('openid_connect_login_form'),
    );
  }
  return array();
}

/**
 * Form builder: Log in with Google form.
 */
function openid_connect_login_form($form, &$form_state) {
  foreach (openid_connect_get_plugins(TRUE) as $client) {
    $form['openid_connect_client_' . $client['name'] . '_login'] = array(
      '#type' => 'submit',
      '#value' => t('Log in with !client_title', array('!client_title' => $client['title'])),
      '#name' => $client['name'],
    );
  }
  return $form;
}

/**
 * Form submit handler: Log in with an OpenID Connect login provider.
 */
function openid_connect_login_form_submit(&$form, &$form_state) {
  ctools_include('plugins');
  $client_plugin_name = $form_state['triggering_element']['#name'];
  $plugin = ctools_get_plugins('openid_connect', 'openid_connect_client', $client_plugin_name);
  $client_id = variable_get('openid_connect_client_' . $client_plugin_name . '_client_id');

  $scopes = openid_connect_get_scopes(variable_get('openid_connect_userinfo_mapping_claims', array()));

  $plugin['class']::sendAuthenticationRequest(
    $client_id,
    $scopes,
    $plugin['login_provider_endpoint']['authentication'],
    url(OPENID_CONNECT_REDIRECT_PATH_BASE . '/' . $plugin['name'], array('absolute' => TRUE)),
    openid_connect_create_state_token()
  );
}

/**
 * Creates a state token and stores it in the session for later validation.
 *
 * @return string
 *   A state token that later can be validated to prevent request forgery.
 */
function openid_connect_create_state_token() {
  $state = md5(rand());
  $_SESSION['openid_connect_state'] = $state;
  return $state;
}

/**
 * Confirms anti-forgery state token.
 *
 * @param string $state_token
 *   The state token that is used for validation.
 *
 * @return bool
 *   Whether the state token matches the previously created one that is stored
 *   in the session.
 */
function confirm_state_token($state_token) {
  return $state_token == $_SESSION['openid_connect_state'];
}

/**
 * Access callback: Redirect page.
 */
function openid_connect_redirect_access() {
  // Confirm anti-forgery state token. This round-trip verification helps to
  // ensure that the user, not a malicious script, is making the request.
  return !empty($_GET['state']) && confirm_state_token($_GET['state']);
}

/**
 * Page callback: Page whereto OpenID Connect login provider redirects.
 */
function openid_connect_redirect_page($client_plugin_name) {
  ctools_include('plugins');
  $plugin = ctools_get_plugins('openid_connect', 'openid_connect_client', $client_plugin_name);
  if (!isset($_GET['error']) && (!$plugin || !isset($_GET['code']))) {
    // In case we don't have an error, but the plugin could not be loaded or
    // there is no state token specified, the URI is probably being visited
    // outside of the login flow.
    return MENU_NOT_FOUND;
  }
  elseif (isset($_GET['error'])) {
    if ($_GET['error'] == 'access_denied') {
      // If we have an "access denied" error, that means the user hasn't granted
      // the authorization for the claims.
      drupal_set_message(t('Sign in with !login-provider has been canceled.', array('!login-provider' => $plugin['title'])), 'warning');
      drupal_goto('<front>');
    }
    else {
      // Any other error should be logged. E.g. invalid scope.
      $variables = array(
        '@error' => $_GET['error'],
        '@details' => $_GET['error_description'],
      );
      watchdog('openid_connect_' . $client_plugin_name, 'Authorization failed: @error. Details: @details', $variables, WATCHDOG_ERROR);
    }
  }
  else {
    // Everything is fine, proceed with the login.
    $client_id = variable_get('openid_connect_client_' . $client_plugin_name . '_client_id');
    $client_secret = variable_get('openid_connect_client_' . $client_plugin_name . '_client_secret');

    $tokens = $plugin['class']::retrieveTokens(
      $_GET['code'],
      $plugin['login_provider_endpoint']['token'],
      $client_id,
      $client_secret,
      url(OPENID_CONNECT_REDIRECT_PATH_BASE . '/' . $plugin['name'], array('absolute' => TRUE))
    );
    if ($tokens) {
      // ID token and access tokens are retrieved, decode the ID token.
      $user_data = $plugin['class']::decodeIDToken($tokens['id_token']);
      if ($userinfo = openid_connect_retrieve_userinfo($client_plugin_name, $tokens['access_token'])) {
        // The sub ID is used by the login provider to identify the user. We
        // also register it in the `authmap` table.
        $account = openid_connect_user_load_by_sub($user_data['sub'], $client_plugin_name);
        openid_connect_login_user($user_data['sub'], $account, $userinfo['email'], $client_plugin_name);
        openid_connect_save_userinfo($account, $userinfo, $client_plugin_name);
      }
      drupal_goto('user');
    }
  }

  drupal_set_message(t('Sign in with !login-provider could not be completed due to an error.', array('!login-provider' => $plugin['title'])), 'error');
  drupal_goto('<front>');
}

/**
 * Retrieves user profile information from the login provider.
 */
function openid_connect_retrieve_userinfo($client_plugin_name, $access_token) {
  ctools_include('plugins');
  $plugin = ctools_get_plugins('openid_connect', 'openid_connect_client', $client_plugin_name);
  if (!$plugin) {
    return FALSE;
  }
  $user_profile = $plugin['class']::retrieveUserInfo(
    $access_token,
    $plugin['login_provider_endpoint']['userinfo']
  );
  return $user_profile ? $user_profile : FALSE;
}

/**
 * Saves user profile information into a user account.
 */
function openid_connect_save_userinfo($account, $user_profile, $client_plugin_name) {
  // Allow modules to alter the user profile information.
  drupal_alter('openid_connect_' . $client_plugin_name . '_userinfo', $user_profile);

  $account_wrapper = entity_metadata_wrapper('user', $account);
  $properties = $account_wrapper->getPropertyInfo();
  $properties_skip = _openid_connect_user_properties_to_skip();
  foreach ($properties as $property_name => $property) {
    if (isset($properties_skip[$property_name])) {
      continue;
    }
    $claim = variable_get('openid_connect_userinfo_mapping_property_' . $property_name, NULL);
    if ($claim && isset($user_profile[$claim])) {
      $account_wrapper->{$property_name} = $user_profile[$claim];
    }
  }
  $account_wrapper->save();

  // Fetch and save user picture from the login provider.
  if (variable_get('user_pictures') && variable_get('openid_connect_user_pictures', TRUE) && !empty($user_profile['picture'])) {
    $picture_directory = file_default_scheme() . '://' . variable_get('user_picture_path', 'pictures');
    if (file_prepare_directory($picture_directory, FILE_CREATE_DIRECTORY)) {
      $picture_request_response = drupal_http_request($user_profile['picture']);
      if ($picture_request_response->code == 200) {
        $picture_path = file_stream_wrapper_uri_normalize($picture_directory . '/picture-' . $account->uid . '-' . REQUEST_TIME . '.jpg');
        $picture_file = file_save_data($picture_request_response->data, $picture_path, FILE_EXISTS_REPLACE);
        // Check to make sure the picture isn't too large for the site settings.
        file_validate_image_resolution($picture_file, variable_get('user_picture_dimensions', '1024x1024'));
        // Update the user record.
        $picture_file->uid = $account->uid;
        $picture_file = file_save($picture_file);
        file_usage_add($picture_file, 'user', 'user', $account->uid);
        db_update('users')
          ->fields(array('picture' => $picture_file->fid))
          ->condition('uid', $account->uid)
          ->execute();
      }
    }
  }
}

/**
 * Logs in a user based on the sub-id returned by the login provider.
 */
function openid_connect_login_user($sub, &$account, $email, $client_plugin_name) {
  if (!$account) {
    $account = openid_connect_create_user($sub, $email, $client_plugin_name);
  }
  $form_state['uid'] = $account->uid;
  user_login_submit(array(), $form_state);
}

/**
 * Creates a user indicating sub-id and login provider.
 */
function openid_connect_create_user($sub, $email, $client_plugin_name) {
  $edit = array(
    'name' => $email,
    'mail' => $email,
    'status' => 1,
    'openid_connect_client' => $client_plugin_name,
    'openid_connect_sub' => $sub,
  );
  $account = user_save(NULL, $edit);
  return $account;
}

/**
 * Implements hook_user_insert().
 */
function openid_connect_user_insert(&$edit, &$account, $category) {
  if (isset($edit['openid_connect_client'])) {
    user_set_authmaps($account, array('authname_openid_connect_' . $edit['openid_connect_client'] => $edit['openid_connect_sub']));
  }
}

/**
 * Deletes a user's authmap entries.
 */
function openid_connect_authmap_delete($uid) {
  db_query("DELETE FROM {authmap} WHERE uid = :uid AND module LIKE 'openid_connect_%'", array(':uid' => $uid));
}

/**
 * Implements hook_user_delete().
 */
function openid_connect_user_delete($account) {
  openid_connect_authmap_delete($account->uid);
}

/**
 * Implements hook_user_cancel().
 */
function openid_connect_user_cancel($edit, $account, $method) {
  openid_connect_authmap_delete($account->uid);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function openid_connect_form_user_profile_form_alter(&$form, &$form_state) {
  if (isset($form['account'])) {
    $account_form = &$form['account'];
  }
  else {
    $account_form = &$form;
  }

  if (openid_connect_get_user_authname($form['#user']->uid)) {
    // Do not let the user to set a password if they are authenticated by a
    // remote service that this module supports.
    // @todo Might need to reconsider this.
    $account_form['current_pass']['#access'] = FALSE;
    $account_form['current_pass_required_values']['#value'] = array();
    $account_form['pass']['#access'] = FALSE;
  }
}

/**
 * Gets the remote authentication name of a user authenticated by this module.
 */
function openid_connect_get_user_authname($uid) {
  $plugins = openid_connect_get_plugins(TRUE);
  $modules = array();
  foreach ($plugins as $plugin) {
    $modules[] = 'openid_connect_' . $plugin['name'];
  }
  if (!empty($modules)) {
    $result = db_select('authmap', 'a')
      ->fields('a', array('authname'))
      ->condition('uid', $uid)
      ->condition('module', $modules, 'IN')
      ->execute()
      ->fetchCol(0);

    return $result;
  }
  return FALSE;
}

/**
 * Loads a user based on a sub-id and a login provider.
 */
function openid_connect_user_load_by_sub($sub, $client_plugin_name) {
  $result = db_select('authmap', 'a')
    ->fields('a', array('uid', 'module'))
    ->condition('authname', $sub)
    ->condition('module', 'openid_connect_' . $client_plugin_name)
    ->execute()
    ->fetchAssoc();
  if ($result) {
    $account = user_load($result['uid']);
    if (is_object($account)) {
      return $account;
    }
  }
  return FALSE;
}

/**
 * Returns standard OpenID Connect claims.
 *
 * @see http://openid.net/specs/openid-connect-core-1_0.html#StandardClaims
 * @see http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims
 */
function openid_connect_claims() {
  return array(
    'name' => array(
      'scope' => 'profile',
    ),
    'family_name' => array(
      'scope' => 'profile',
    ),
    'given_name' => array(
      'scope' => 'profile',
    ),
    'middle_name' => array(
      'scope' => 'profile',
    ),
    'nickname' => array(
      'scope' => 'profile',
    ),
    'preferred_username' => array(
      'scope' => 'profile',
    ),
    'profile' => array(
      'scope' => 'profile',
    ),
    'picture' => array(
      'scope' => 'profile',
    ),
    'website' => array(
      'scope' => 'profile',
    ),
    'gender' => array(
      'scope' => 'profile',
    ),
    'birthdate' => array(
      'scope' => 'profile',
    ),
    'zoneinfo' => array(
      'scope' => 'profile',
    ),
    'locale' => array(
      'scope' => 'profile',
    ),
    'updated_at' => array(
      'scope' => 'profile',
    ),
    'email' => array(
      'scope' => 'email',
    ),
    'email_verified' => array(
      'scope' => 'email',
    ),
    'address' => array(
      'scope' => 'address',
    ),
    'phone_number' => array(
      'scope' => 'phone',
    ),
    'phone_number_verified' => array(
      'scope' => 'phone',
    ),
  );
}

/**
 * Returns OpenID Connect standard Claims as a Form API options array.
 */
function openid_connect_claims_options() {
  $options = array();
  foreach (openid_connect_claims() as $claim_name => $claim) {
    $options[$claim['scope']][$claim_name] = $claim_name;
  }
  return $options;
}

/**
 * Returns scopes that have to be requested for certain Claims.
 *
 * @see http://openid.net/specs/openid-connect-core-1_0.html#ScopeClaims
 *
 * @param array $claims
 *   Claims that are being requested.
 *
 * @return string
 *   Space delimited case sensitive list of ASCII scope values.
 */
function openid_connect_get_scopes($claims) {
  $default_scopes = 'openid email';
  $scopes = array();
  $claims_info = openid_connect_claims();
  foreach ($claims as $claim) {
    if (isset($claims_info[$claim]) && !isset($scopes[$claims_info[$claim]['scope']]) && $claim != 'email') {
      $scopes[$claims_info[$claim]['scope']] = $claims_info[$claim]['scope'];
    }
  }
  if (!empty($scopes)) {
    return $default_scopes . ' ' . implode(' ', $scopes);
  }
  return $default_scopes;
}

/**
 * Returns user properties that can be skipped when mapping user profile info.
 */
function _openid_connect_user_properties_to_skip() {
  $properties_to_skip = array('uid', 'url', 'edit_url', 'last_access', 'last_login', 'created', 'roles', 'status', 'theme');
  return drupal_map_assoc($properties_to_skip);
}

/**
 * Logs an error occured during a request towards a login provider.
 */
function openid_connect_log_request_error($method, $client_plugin_name, $response_error, $response_code, $response_data) {
  switch ($method) {
    case 'retrieveTokens':
      $message = 'Could not retrieve tokens';
      break;

    case 'retrieveUserInfo':
      $message = 'Could not retrieve user profile information';
      break;

    default:
      return;
  }
  $variables = array(
    '@error' => $response_error,
    '@code' => $response_code,
    '@details' => print_r(drupal_json_decode($response_data), TRUE),
  );
  watchdog('openid_connect_' . $client_plugin_name, $message . ' (@code @error). Details: @details', $variables, WATCHDOG_ERROR);
}

/**
 * Implements openid_connect_LOGIN_PROVIDER_userinfo_alter().
 */
function openid_connect_openid_connect_google_userinfo_alter(&$userinfo) {
  // For some reason Google returns the URI of the profile picture in a weird
  // format: "https:" appears twice in the beginning of the URI.
  // Using a regular expression matching for fixing it guarantees that things
  // won't break if Google changes the way the URI is returned.
  preg_match('/https:\/\/*.*/', $userinfo['picture'], $matches);
  $userinfo['picture'] = $matches[0];
}
