<?php
// $Id: xmlsitemap.module,v 1.20.2.45.2.45 2009/05/05 15:36:41 davereid Exp $

/**
 * @link https://www.google.com/webmasters/tools/docs/en/protocol.html
 */

/**
 * Drupal 7 backport to define REQUEST_TIME.
 */
if (!defined('REQUEST_TIME')) {
  define('REQUEST_TIME', time());
}

/**
 * PHP 5.2 backport to define DATE_W3C.
 */
if (!defined('DATE_W3C')) {
  define('DATE_W3C', 'Y-m-d\TH:i:sP');
}

/**
 * The default priority value for the database.
 */
define('XMLSITEMAP_PRIORITY_DEFAULT', NULL);

define('XMLSITEMAP_FREQUENCY_YEARLY', 31449600); // 60 * 60 * 24 * 7 * 52
define('XMLSITEMAP_FREQUENCY_MONTHLY', 2419200); // 60 * 60 * 24 * 7 * 4
define('XMLSITEMAP_FREQUENCY_WEEKLY', 604800); // 60 * 60 * 24 * 7
define('XMLSITEMAP_FREQUENCY_DAILY', 86400); // 60 * 60 * 24
define('XMLSITEMAP_FREQUENCY_HOURLY', 3600); // 60 * 60
define('XMLSITEMAP_FREQUENCY_ALWAYS', 60);

/**
 * Implementation of hook_help().
 */
function xmlsitemap_help($path, $arg) {
  $output = '';

  switch ($path) {
    case 'admin/help#xmlsitemap':
      break;
    case 'admin/settings/xmlsitemap':
      break;
  }

  if (strpos($path, 'xmlsitemap') !== FALSE) {
    $output .= '<p>' . t('Your sitemap is at <a href="@sitemap">@sitemap</a>.', array('@sitemap' => url('sitemap.xml', array('absolute' => TRUE)))) . '</p>';
    xmlsitemap_check_status();
  }

  return $output;
}

/**
 * Implementation of hook_perm().
 */
function xmlsitemap_perm() {
  return array(
    'administer xmlsitemap',
  );
}

/**
 * Implementation of hook_menu().
 */
function xmlsitemap_menu() {
  $items['admin/settings/xmlsitemap'] = array(
    'title' => 'XML Sitemap',
    'description' => 'Configure the site map.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_settings_form'),
    'access arguments' => array('administer xmlsitemap'),
    'file' => 'xmlsitemap.admin.inc',
  );
  $items['admin/settings/xmlsitemap/settings'] = array(
    'title' => 'Settings',
    'access arguments' => array('administer xmlsitemap'),
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'file' => 'xmlsitemap.admin.inc',
    'weight' => -10,
  );
  $items['admin/settings/xmlsitemap/rebuild'] = array(
    'title' => 'Rebuild',
    'description' => 'Rebuild the site map.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xmlsitemap_rebuild_confirm'),
    'access arguments' => array('administer xmlsitemap'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'xmlsitemap.admin.inc',
    'weight' => 10,
  );
  $items['sitemap.xml'] = array(
    'page callback' => 'xmlsitemap_output',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
    'file' => 'xmlsitemap.pages.inc',
  );
  $chunks = xmlsitemap_get_chunk_count();
  if ($chunks > 1) {
    for ($i = 1; $i <= $chunks; $i++) {
      $items['sitemap-' . $i . '.xml'] = array(
        'page callback' => 'xmlsitemap_output',
        'page arguments' => array((string) $i),
        'access arguments' => array('access content'),
        'type' => MENU_CALLBACK,
        'file' => 'xmlsitemap.pages.inc',
      );
    }
  }
  $items['sitemap.xsl'] = array(
    'page callback' => 'xmlsitemap_xsl',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'xmlsitemap.pages.inc',
  );

  return $items;
}

/**
 * Implementation of hook_cron().
 */
function xmlsitemap_cron() {
  $can_regenerate = (REQUEST_TIME - variable_get('cron_last', 0)) >= xmlsitemap_var('minimum_lifetime');
  if (xmlsitemap_var('regenerate_needed') && $can_regenerate) {
    xmlsitemap_regenerate();
  }
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_xmlsitemap_links() {
  $links = array();

  // Frontpage link.
  $links[] = array(
    'type' => 'frontpage',
    'id' => 0,
    'loc' => '',
  );

  // Custom links.
  if ($custom_links = xmlsitemap_var('custom_links')) {
    $custom_links = preg_split('/[\r\n]+/', $custom_links, -1, PREG_SPLIT_NO_EMPTY);
    for ($i = 0; $i < count($custom_links); $i++) {
      $links[] = array(
        'type' => 'custom',
        'id' => $i,
        'loc' => drupal_get_normal_path($custom_links[$i]),
      );
    }
  }

  return $links;
}

/**
 * Implementation of hook_xmlsitemap_link_alter().
 */
function xmlsitemap_xmlsitemap_link_alter(&$link) {
  // Alter the frontpage priority.
  if ($link['type'] == 'frontpage' || $link['loc'] == '' || $link['loc'] == drupal_get_normal_path(variable_get('site_frontpage', 'node'))) {
    $link['priority'] = xmlsitemap_var('frontpage_priority');
    $link['changefreq'] = xmlsitemap_var('frontpage_changefreq');
  }
}

/**
 * Implementation of hook_xmlsitemap_links_clear().
 */
function xmlsitemap_xmlsitemap_links_clear() {
  db_query("DELETE FROM {xmlsitemap} WHERE type = 'frontpage' OR type = 'custom'");
}

/**
 * Implementation of hook_robotstxt().
 */
function xmlsitemap_robotstxt() {
  return array(
    'Sitemap: '. url('sitemap.xml', array('absolute' => TRUE)),
  );
}

/**
 * Check the status of all hook_requirements() from xmlsitemap modules.
 *
 * @param $return_only
 *   If TRUE, will return the result, otherwise it will show a message.
 * @return
 *   TRUE if there is a warning or error requirement, or FALSE otherwise.
 */
function xmlsitemap_check_status($return_only = FALSE) {
  // Load .install files
  include_once './includes/install.inc';
  drupal_load_updates();
  $warnings = FALSE;

  foreach (module_implements('requirements') as $module) {
    if (strpos($module, 'xmlsitemap') !== FALSE) {
      $requirements = module_invoke($module, 'requirements', 'runtime');
      if (drupal_requirements_severity($requirements) == (REQUIREMENT_WARNING | REQUIREMENT_ERROR)) {
        $warnings = TRUE;
        break;
      }
    }
  }

  if ($warnings && !$return_only && user_access('administer site configuration')) {
    drupal_set_message(t('One or more problems were detected with your sitemap configuration. Please check the <a href="@status-report">status report</a> for more information.', array('@status-report' => url('admin/reports/status'))), 'warning', FALSE);
  }

  return $warnings;
}

/**
 * Delete and regenerate the sitemap files.
 */
function xmlsitemap_regenerate() {
  // Clear the sitemap files directory (but don't remove it!).
  $path = file_create_path(xmlsitemap_var('path'));
  xmlsitemap_clean_directory($path, FALSE);

  // Generate the sitemap pages.
  $chunk_count = xmlsitemap_get_chunk_count(TRUE);
  for ($i = 0; $i <= $chunk_count; $i++) {
    xmlsitemap_generate($i);
  }

  // Show a watchdog message that the sitemap was regenerated.
  watchdog('xmlsitemap', 'Sitemap regenerated.', array(), WATCHDOG_NOTICE, l(t('View'), 'sitemap.xml'));

  // Unset the regenerate flag.
  variable_set('xmlsitemap_regenerate_needed', FALSE);

  // If the chunk count has changed, we will need to rebuild the menu.
  variable_set('menu_rebuild_needed', TRUE);
}

/**
 * Get a list of priority options.
 *
 * @param $include_default
 *   Include a 'default' option.
 * @return
 *   An array of options.
 */
function xmlsitemap_get_priority_options($include_default = FALSE) {
  $options = array();

  foreach (range(0, 1, 0.1) as $option) {
    $option = number_format($option, 1);
    $options[$option] = $option;
  }

  if ($include_default) {
    $options[XMLSITEMAP_PRIORITY_DEFAULT] = t('Default');
  }

  return $options;
}

function xmlsitemap_get_changefreq_options() {
  return array(
     XMLSITEMAP_FREQUENCY_ALWAYS => 'always',
     XMLSITEMAP_FREQUENCY_HOURLY => 'hourly',
     XMLSITEMAP_FREQUENCY_DAILY => 'daily',
     XMLSITEMAP_FREQUENCY_WEEKLY => 'weekly',
     XMLSITEMAP_FREQUENCY_MONTHLY => 'monthly',
     XMLSITEMAP_FREQUENCY_YEARLY => 'yearly',
  );
}

/**
 * Determine the frequency of updates to a link.
 *
 * @param $interval
 *   An interval value in seconds.
 * @return
 *   A string representing the update frequency according to the sitemaps.org
 *   protocol.
 */
function xmlsitemap_get_changefreq($interval) {
  if ($interval <= 0 || !is_numeric($interval)) {
    return FALSE;
  }

  foreach (xmlsitemap_get_changefreq_options() as $value => $frequency) {
    if ($interval <= $value) {
      return $frequency;
    }
  }

  return 'never';
}

/**
 * Get the current number of sitemap chunks.
 */
function xmlsitemap_get_chunk_count($reset = FALSE) {
  static $chunks;
  if (!isset($chunks) || $reset) {
    $count = xmlsitemap_get_link_count($reset);
    $chunks = ceil($count / xmlsitemap_get_chunk_size($reset));
  }
  return $chunks;
}

/**
 * Get the current number of sitemap links.
 */
function xmlsitemap_get_link_count($reset = FALSE) {
  static $count;
  if (!isset($count) || $reset) {
    $count = db_result(db_query("SELECT COUNT(*) FROM {xmlsitemap} WHERE status = 1"));
  }
  return $count;
}

/**
 * Get the sitemap chunk size.
 *
 * This function is useful with the chunk size is set to automatic as it will
 * calculate the appropriate value. Use this function instead of @code
 * xmlsitemap_var('chunk_size') @endcode when the actual value is needed.
 *
 * @param $reset
 *   A boolean to reset the saved, static result. Defaults to FALSE.
 * @return
 *   An integer with the number of links in each sitemap page.
 */
function xmlsitemap_get_chunk_size($reset = FALSE) {
  static $size;
  if (!isset($size) || $reset) {
    $size = xmlsitemap_var('chunk_size');
    if ($size == 'auto') {
      $count = max(xmlsitemap_get_link_count($reset), 1); // Prevent divide by zero.
      $size = min(ceil($count / 10000) * 5000, 50000);
    }
  }
  return $size;
}

/**
 * Recalculate the changefreq of a sitemap link.
 *
 * @param $link
 *   A sitemap link array.
 */
function xmlsitemap_recalculate_changefreq(&$link) {
  $link['changefreq'] = round((($link['changefreq'] * $link['changecount']) + (REQUEST_TIME - $link['lastmod'])) / ($link['changecount'] + 1));
  $link['changecount']++;
  $link['lastmod'] = REQUEST_TIME;
}

/**
 * Calculates the average interval between UNIX timestamps.
 *
 * @param $timestamps
 *   An array of UNIX timestamp integers.
 * @return
 *   An integer of the average interval.
 */
function xmlsitemap_calculate_changefreq($timestamps) {
  sort($timestamps);
  $count = count($timestamps) - 1;
  $diff = 0;

  for ($i = 0; $i < $count; $i++) {
    $diff += $timestamps[$i + 1] - $timestamps[$i];
  }

  return $count > 0 ? round($diff / $count) : 0;
}

/**
 * Load a specific sitemap link.
 *
 * @param $where
 *   An array of conditions (can be values keyed on column name).
 * @param $args
 *   An optional array of values to pass to the query.
 * @return
 *   An object representing a sitemap link.
 */
function xmlsitemap_load_link(array $where, array $args = array()) {
  foreach ($where as $key => $value) {
    if (is_string($key)) {
      $args[] = $value;
      $where[$key] = $key .' = '. (is_numeric($value) ? '%d' : "'%s'");
    }
  }

  $link = db_fetch_array(db_query_range("SELECT * FROM {xmlsitemap} WHERE ". implode(' AND ', $where), $args, 0, 1));

  // Allow other modules to respond after loading the link.
  //module_invoke_all('xmlsitemap_load_link', $link);

  return $link;
}

/**
 * Saves or updates a sitemap link.
 *
 * @param $link
 *   An array with a sitemap link.
 */
function xmlsitemap_save_link(array $link) {
  $link += array(
    'status' => TRUE,
    'priority' => XMLSITEMAP_PRIORITY_DEFAULT,
    'changefreq' => 0,
    'changecount' => 0,
  );

  // Allow other modules to alter the link (priority, status, etc.).
  drupal_alter('xmlsitemap_link', $link);

  // If the link is not going to be in the sitemap, delete its data.
  if (!$link['status']) {
    //xmlsitemap_delete_link(array('type' => $link['type'], 'id' => $link['id']));
    //return FALSE;
  }

  // Warn if the priority is an invalid value.
  if ($link['priority'] < 0 || $link['priority'] > 1) {
    watchdog('xmlsitemap', "Invalid sitemap link priority %priority.<br />@link", array('%priority' => $link['priority'], '@link' => var_export($link, TRUE)), WATCHDOG_NOTICE);
  }

  $existing = xmlsitemap_load_link(array('type' => $link['type'], 'id' => $link['id']));
  if (!$existing || array_intersect_assoc($link, $existing)) {
    // This is a new or changed entry, set that we need a sitemap rebuild.
    variable_set('xmlsitemap_regenerate_needed', TRUE);

    if ($existing) {
      xmlsitemap_write_record('xmlsitemap', $link, array('type', 'id'));
    }
    else {
      xmlsitemap_write_record('xmlsitemap', $link);
    }
  }

  // Allow other modules to save the link.
  //module_invoke_all('xmlsitemap_save_link', $link);

  return $link;
}

/**
 * Delete a sitemap link.
 *
 * @param $where
 *   An array of values to match keyed by column.
 * @param $args
 *   An optional array of values to pass to the query.
 */
function xmlsitemap_delete_link(array $where, array $args = array()) {
  if ($existing = xmlsitemap_load_link($where, $args)) {
    db_query("DELETE FROM {xmlsitemap} WHERE type = '%s' AND id = %d", $existing['type'], $existing['id']);

    if ($existing['status']) {
      // Set the regenerate flag since a sitemap-visible link was deleted.
      variable_set('xmlsitemap_regenerate_needed', TRUE);
    }

    // Allow other modules to respond after deleting the link.
    //module_invoke_all('xmlsitemap_delete_link', $link);
  }
}

/**
 * Recusrively delete all files and directories in the specific filepath.
 *
 * @param $path
 *   A string containing a file or directory path.
 * @param $remove_dir
 *   A boolean that if set TRUE and $path is a directory, $path will be removed.
 * @param $level
 *   An integer with the current level of recursion.
 * @return
 *   TRUE for success or path does not exist, or FALSE in the event of an error.
 *
 * @todo Replace with file_unmanaged_delete_recursive in Drupal 7.
 */
function xmlsitemap_clean_directory($path, $remove_dir = FALSE, $level = 0) {
  if (is_dir($path) && $handle = opendir($path)) {
    while (($file = readdir($handle)) !== FALSE) {
      if ($file == '.' || $file == '..') {
        continue;
      }
      xmlsitemap_clean_directory($path . '/' . $file, $level + 1);
    }
    closedir($handle);
    return $remove_dir ? rmdir($path) : TRUE;
  }
  elseif (is_file($path)) {
    return unlink($path);
  }
}

/**
 * Fetch the data from {xmlsitemap}, generates the sitemap, then caches it.
 *
 * @return
 *   TRUE on success; otherwise FALSE
 */
function xmlsitemap_generate($chunk = 0) {
  //cache_clear_all(url('xmlsitemap_'. $chunk .'.xml', array('absolute' => TRUE)), 'cache_page');

  if (!is_numeric($chunk) || $chunk > xmlsitemap_get_chunk_count()) {
    return FALSE;
  }

  if (xmlsitemap_get_chunk_count() == 1) {
    $chunk = 0;
    $output = xmlsitemap_generate_chunk($chunk);
  }
  elseif ($chunk) {
    $output = xmlsitemap_generate_chunk($chunk);
  }
  else {
    $output = xmlsitemap_generate_index();
  }

  // Write the output file.
  return file_save_data($output, xmlsitemap_get_chunk_file($chunk), FILE_EXISTS_REPLACE);
}

/**
 * Get the filename of a specific sitemap page chunk.
 *
 * @param $chunk
 *   An integer representing the integer of the sitemap page chunk.
 * @return
 *   A file path to the expected chunk file.
 */
function xmlsitemap_get_chunk_file($chunk = 0) {
  return file_create_path(xmlsitemap_var('path')) .'/xmlsitemap-'. $chunk . '.xml';
}

/**
 * Generate one page (chunk) of the sitemap.
 *
 * @param $chunk
 *   An integer representing the integer of the sitemap page chunk.
 *
 * @todo Use an ORDER BY in the SQL?
 * @todo Figure out how to implement multilanguage?
 */
function xmlsitemap_generate_chunk($chunk) {
  $language = language_default();

  $output = '<?xml version="1.0" encoding="UTF-8"?>' . "\n";
  if (xmlsitemap_var('xsl')) {
    $output .= '<?xml-stylesheet type="text/xsl" href="'. url('sitemap.xsl') .'"?>' . "\n";
  }
  $output .= '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' . "\n";
  //$output .= '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' . "\n";
  //$output .= '  xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9' . "\n";
  //$output .= '  http://www.sitemaps.org/schemas/sitemap/0.9/sitemap.xsd">' . "\n";

  $sql = "SELECT COALESCE(ua.dst, x.loc) AS alias, x.loc, x.lastmod, x.changefreq, x.changecount, x.priority, ua.language FROM {xmlsitemap} x
          LEFT JOIN {url_alias} ua ON x.loc = ua.src
          WHERE x.status = 1 AND (ua.language IS NULL OR ua.language IN ('', '%s'))
          GROUP BY x.loc";
  $offset = max($chunk - 1, 0) * xmlsitemap_get_chunk_size();
  $limit = xmlsitemap_get_chunk_size();
  $query = db_query_range($sql, array($language->language), $offset, $limit);

  while ($link = db_fetch_array($query)) {
    $output .= '<url>';
    $output .= '<loc>'. url($link['alias'], array('absolute' => TRUE, 'alias' => TRUE)) .'</loc>';
    if ($link['lastmod']) {
      $output .= '<lastmod>'. gmdate(DATE_W3C, $link['lastmod']) .'</lastmod>';
        // If the link has a lastmod value, update the changefreq so that links
        // with a short changefreq but updated two years ago show decay.
      //xmlsitemap_recalculate_changefreq($link);
      $link['changefreq'] = (REQUEST_TIME - $link['lastmod'] + $link['changefreq']) / 2;
    }
    if ($link['changefreq']) {
      $output .= '<changefreq>'. xmlsitemap_get_changefreq($link['changefreq']) .'</changefreq>';
    }
    if ($link['priority'] !== XMLSITEMAP_PRIORITY_DEFAULT) {
      $output .= '<priority>'. number_format($link['priority'], 1) .'</priority>';
    }
    $output .= '</url>' . "\n";
  }

  $output .= '</urlset>';
  return $output;
}

/**
 * Generate the index sitemap.
 */
function xmlsitemap_generate_index() {
  $output = '<?xml version="1.0" encoding="UTF-8"?>' . "\n";
  if (xmlsitemap_var('xsl')) {
    $output .= '<?xml-stylesheet type="text/xsl" href="'. url('sitemap.xsl') .'"?>' . "\n";
  }
  $output .= '<sitemapindex xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">' . "\n";
  //$output .= '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"' . "\n";
  //$output .= '  xsi:schemaLocation="http://www.sitemaps.org/schemas/sitemap/0.9' . "\n";
  //$output .= '  http://www.sitemaps.org/schemas/sitemap/0.9/siteindex.xsd">' . "\n";

  $count = xmlsitemap_get_chunk_count(TRUE);
  for ($i = 1; $i <= $count; $i++) {
    $output .= '<sitemap>';
    $output .= '<loc>'. url('sitemap-' . $i . '.xml', array('absolute' => TRUE)) .'</loc>';
    $output .= '<lastmod>'. gmdate(DATE_W3C, REQUEST_TIME) .'</lastmod>';
    $output .= '</sitemap>' . "\n";
  }

  $output .= '</sitemapindex>';
  return $output;
}

/**
 * Internal default variables for template_var().
 */
function xmlsitemap_variables() {
  return array(
    'xmlsitemap_rebuild_needed' => FALSE,
    'xmlsitemap_regenerate_needed' => FALSE,
    'xmlsitemap_chunk_size' => 'auto',
    'xmlsitemap_frontpage_priority' => '1.0',
    'xmlsitemap_frontpage_changefreq' => XMLSITEMAP_FREQUENCY_DAILY,
    'xmlsitemap_priority_default' => '0.5',
    'xmlsitemap_path' => 'xmlsitemap',
    'xmlsitemap_batch_limit' => 100,
    'xmlsitemap_custom_links' => '',
    'xmlsitemap_minimum_lifetime' => 86400,
    'xmlsitemap_xsl' => TRUE,
  );
}

/**
 * Internal implementation of variable_get().
 */
function xmlsitemap_var($name, $default = NULL) {
  static $defaults = NULL;
  if (!isset($defaults)) {
    $defaults = xmlsitemap_variables();
  }

  $name = 'xmlsitemap_'. $name;

  // @todo Remove when stable.
  if (!isset($defaults[$name])) {
    trigger_error(t('Default variable for %variable not found.', array('%variable' => $name)));
  }

  return variable_get($name, isset($default) || !isset($defaults[$name]) ? $default : $defaults[$name]);
}

/**
 * Set the current user stored in $GLOBALS['user'].
 *
 * @todo Remove when http://drupal.org/node/287292 is fixed.
 */
function xmlsitemap_switch_user($new_user = NULL) {
  global $user;
  static $user_original;

  if (!isset($new_user)) {
    if (isset($user_original)) {
      // Restore the original user.
      $user = $user_original;
      unset($user_original);
      session_save_session(TRUE);
    }
  }
  else {
    // Backup the user the first time this is called.
    if (!isset($user_original)) {
      $user_original = $user;
      session_save_session(FALSE);
    }

    if (is_numeric($new_user)) {
      if (!$new_user) {
        $user = drupal_anonymous_user();
      }
      else {
        $user = user_load(array('uid' => $new_user));
      }
    }
    else {
      $user = is_object($new_user) ? $new_user : (object) $new_user;
    }
  }

  return $user;
}

/**
 * Restore the user that was originally loaded.
 *
 * @return Current user.
 */
function xmlsitemap_restore_user() {
  return xmlsitemap_switch_user();
}

/**
 * Special implementation of drupal_write_record() to allow NULL values.
 *
 * @todo Remove when http://drupal.org/node/227677 is fixed.
 */
function xmlsitemap_write_record($table, &$object, $update = array()) {
  // Standardize $update to an array.
  if (is_string($update)) {
    $update = array($update);
  }

  $schema = drupal_get_schema($table);
  if (empty($schema)) {
    return FALSE;
  }

  // Convert to an object if needed.
  if (is_array($object)) {
    $object = (object) $object;
    $array = TRUE;
  }
  else {
    $array = FALSE;
  }

  $fields = $defs = $values = $serials = $placeholders = array();
  $object_fields = get_object_vars($object);

  // Go through our schema, build SQL, and when inserting, fill in defaults for
  // fields that are not set.
  foreach ($schema['fields'] as $field => $info) {
    // Special case -- skip serial types if we are updating.
    if ($info['type'] == 'serial') {
      if (empty($update)) {
        // Track serial fields so we can helpfully populate them after the query.
        $serials[] = $field;
      }
      continue;
    }

    // For inserts, populate defaults from Schema if not already provided
    if (!isset($object->$field) && !count($update) && isset($info['default']) && !array_key_exists($field, $object_fields)) {
      $object->$field = $info['default'];
    }

    // Build arrays for the fields, placeholders, and values in our query.
    if (isset($object->$field) || (array_key_exists($field, $object_fields) && empty($info['not null']))) {
      $fields[] = $field;
      if (isset($object->$field)) {
        $placeholders[] = db_type_placeholder($info['type']);
        $values[] = empty($info['serialize']) ? $object->$field : serialize($object->$field);
      }
      else {
        $placeholders[] = '%s';
        $values[] = 'NULL';
      }
    }
  }

  // Build the SQL.
  $query = '';
  if (!count($update)) {
    $query = "INSERT INTO {". $table ."} (". implode(', ', $fields) .') VALUES ('. implode(', ', $placeholders) .')';
    $return = SAVED_NEW;
  }
  else {
    $query = '';
    foreach ($fields as $id => $field) {
      if ($query) {
        $query .= ', ';
      }
      $query .= $field .' = '. $placeholders[$id];
    }

    foreach ($update as $key){
      $conditions[] = "$key = ". db_type_placeholder($schema['fields'][$key]['type']);
      $values[] = $object->$key;
    }

    $query = "UPDATE {". $table ."} SET $query WHERE ". implode(' AND ', $conditions);
    $return = SAVED_UPDATED;
  }

  // Execute the SQL.
  if (db_query($query, $values)) {
    if ($serials) {
      // Get last insert ids and fill them in.
      foreach ($serials as $field) {
        $object->$field = db_last_insert_id($table, $field);
      }
    }
  }
  else {
    $return = FALSE;
  }

  // If we began with an array, convert back so we don't surprise the caller.
  if ($array) {
    $object = (array) $object;
  }

  return $return;
}
