<?php
// $Id: xmlsitemap_node.module,v 1.19.2.20.2.37 2009/05/04 23:40:20 davereid Exp $

/**
 * Implementation of hook_cron().
 *
 * Process old nodes not found in the {xmlsitemap} table.
 */
function xmlsitemap_node_cron() {
  // Start with the most recently changed nodes first.
  $query = db_query_range("SELECT n.nid FROM {node} n LEFT JOIN {xmlsitemap} x ON n.nid = x.id WHERE COALESCE(x.type, 'node') = 'node' AND x.id IS NULL ORDER BY n.changed DESC", NULL, 0, xmlsitemap_var('batch_limit'));
  while ($nid = db_result($query)) {
    $node = node_load($nid, NULL, TRUE);
    xmlsitemap_node_create_link($node);
    xmlsitemap_save_link($node->xmlsitemap);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function xmlsitemap_node_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  switch ($op) {
    case 'load':
      return xmlsitemap_node_node_load($node);
    case 'insert':
      return xmlsitemap_node_node_insert($node);
    case 'update':
      return xmlsitemap_node_node_update($node);
    case 'delete':
      return xmlsitemap_node_node_delete($node);
  }
}

/**
 * Implementation of hook_node_load().
 */
function xmlsitemap_node_node_load($node) {
  if ($data = xmlsitemap_load_link(array('type' => 'node', 'id' => $node->nid))) {
    return array('xmlsitemap' => $data);
  }
}

/**
 * Implementation of hook_node_insert().
 */
function xmlsitemap_node_node_insert($node) {
  xmlsitemap_node_create_link($node);
  xmlsitemap_save_link($node->xmlsitemap);
}

/**
 * Implementation of hook_node_update().
 */
function xmlsitemap_node_node_update($node) {
  xmlsitemap_node_create_link($node);

  if ($node->revision) {
    // Update the change frequency.
    xmlsitemap_recalculate_changefreq($node->xmlsitemap);
  }

  xmlsitemap_save_link($node->xmlsitemap);
}

/**
 * Implementation of hook_node_delete().
 */
function xmlsitemap_node_node_delete($node) {
  xmlsitemap_delete_link(array('type' => 'node', 'id' => $node->nid));
}

/**
 * Impelementation of hook_comment().
 */
function xmlsitemap_node_comment($comment, $op) {
  switch ($op) {
    case 'delete':
    case 'publish':
    case 'unpublish':
      $comment = (object) $comment;
      if ($node = node_load($comment->nid, NULL, TRUE)) {
        xmlsitemap_node_create_link($node);
        if ($op == 'publish') {
          xmlsitemap_recalculate_changefreq($node->xmlsitemap);
        }
        xmlsitemap_save_link($node->xmlsitemap);
      }
      break;
  }
}

/**
 * Implementation of hook_form_alter().
 */
//function xmlsitemap_node_form_alter(&$form, $form_state, $form_id) {
//  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {
//    $node = $form['#node'];
//    xmlsitemap_node_create_link($node);
//
//    $form['xmlsitemap'] = array(
//      '#type' => 'fieldset',
//      '#tree' => TRUE,
//      '#title' => t('Sitemap'),
//      '#collapsible' => TRUE,
//      '#collapsed' => TRUE,
//      '#weight' => 30,
//      '#access' => user_access('administer xmlsitemap') || user_access('administer nodes'),
//      '#access' => FALSE, // Temporarily disable this...it is not working correctly.
//    );
//    $form['xmlsitemap']['status'] = array(
//      '#type' => 'checkbox',
//      '#title' => t('Include this content in the sitemap.'),
//      '#default_value' => $node->xmlsitemap['status'],
//    );
//    $form['xmlsitemap']['priority'] = array(
//      '#type' => 'select',
//      '#title' => t('Priority'),
//      '#options' => xmlsitemap_get_priority_options(TRUE),
//      '#default_value' => $node->xmlsitemap['priority'],
//    );
//    $form['xmlsitemap']['lastmod'] = array(
//      '#type' => 'value',
//      '#value' => $node->xmlsitemap['lastmod'],
//    );
//    $form['xmlsitemap']['changefreq'] = array(
//      '#type' => 'value',
//      '#value' => $node->xmlsitemap['changefreq'],
//    );
//    $form['xmlsitemap']['changecount'] = array(
//      '#type' => 'value',
//      '#value' => $node->xmlsitemap['changecount'],
//    );
//    if (isset($node->nid) && !node_access('view', $node, drupal_anonymous_user())) {
//      $form['xmlsitemap']['xmlsitemap_status']['#disabled'] = TRUE;
//      $form['xmlsitemap']['xmlsitemap_status']['#description'] = t('If this content is not viewable by anonymous users, it will be excluded from the sitemap.');
//    }
//  }
//}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_node_xmlsitemap_links($offset = 0, $limit = 0) {
  $links = array();

  $sql = "SELECT n.nid FROM {node} n WHERE n.nid > %d ORDER BY n.nid";
  $query = ($limit ? db_query_range($sql, $offset, 0, $limit) : db_query($sql, $offset));

  while ($nid = db_result($query)) {
    $node = node_load($nid, NULL, TRUE);
    xmlsitemap_node_create_link($node);
    $links[] = $node->xmlsitemap;
  }

  return $links;
}

/**
 * Implementation of hook_xmlsitemap_links_batch().
 */
function xmlsitemap_node_xmlsitemap_links_batch(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_nid'] = 0;
    $context['sandbox']['max'] = db_result(db_query("SELECT COUNT(n.nid) FROM {node} n"));
  }

  $links = xmlsitemap_node_xmlsitemap_links($context['sandbox']['current_nid'], xmlsitemap_var('batch_limit'));
  foreach ($links as $link) {
    xmlsitemap_save_link($link);
    $context['sandbox']['progress']++;
    $context['sandbox']['current_nid'] = $link['id'];
    $context['message'] = t('Processing node @nid', array('@nid' => $link['id']));
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Implementation of hook_xmlsitemap_links_clear().
 */
function xmlsitemap_node_xmlsitemap_links_clear() {
  db_query("DELETE FROM {xmlsitemap} WHERE type = 'node'");
}

/**
 * Implementation of hook_node_operations().
 */
function xmlsitemap_node_node_operations() {
  return array(
    'xmlsitemap_include' => array(
      'label' => t('Include in the sitemap'),
      'callback' => 'xmlsitemap_node_mass_update',
      'callback arguments' => array('updates' => array('status' => 1)),
    ),
    'xmlsitemap_exclude' => array(
      'label' => t('Exclude from the sitemap'),
      'callback' => 'xmlsitemap_node_mass_update',
      'callback arguments' => array('updates' => array('status' => 0)),
    ),
  );
}

/**
 * Perform a mass update of node sitemap links.
 *
 * @param $nodes
 *   An array of node IDs.
 */
function xmlsitemap_node_mass_update($nodes, $updates) {
  // We use batch processing to prevent timeout when updating a large number
  // of nodes.
  if (count($nodes) > 10) {
    $batch = array(
      'operations' => array(
        array('_xmlsitemap_node_mass_update_batch_process', array($nodes, $updates))
      ),
      'finished' => '_xmlsitemap_node_mass_update_batch_finished',
      'title' => t('Processing'),
      'progress_message' => '',
      'error_message' => t('The update has encountered an error.'),
    );
    batch_set($batch);
  }
  else {
    foreach ($nodes as $nid) {
      _xmlsitemap_node_mass_update_helper($nid, $updates);
    }
    drupal_set_message(t('The update has been performed.'));
  }
}

/**
 * Update a node sitemap link.
 *
 * @param $nid
 *   A node ID.
 * @return
 *   A node object after it has been updated.
 */
function _xmlsitemap_node_mass_update_helper($nid, $updates) {
  $node = node_load($nid, NULL, TRUE);
  xmlsitemap_node_create_link($node);

  foreach ($updates as $key => $value) {
    $node->xmlsitemap[$key] = $value;
  }

  xmlsitemap_save_link($node->xmlsitemap);
  return $node;
}

/**
 * Batch callback; sitemap node links mass update operation.
 */
function _xmlsitemap_node_mass_update_batch_process($nodes, $updates, &$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['max'] = count($nodes);
    $context['sandbox']['nodes'] = $nodes;
  }

  // Process nodes in groups of 10.
  foreach (array_splice($nodes, 0, 10) as $nid) {
    $node = _xmlsitemap_node_mass_update_helper($nid, $updates);
    // Store result for post-processing in the finished callback and update
    // our progress information.
    $context['results'][] = l($node->title, 'node/' . $node->nid);
    $context['sandbox']['progress']++;
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Batch callback; sitemap node links mass update finished.
 */
function _xmlsitemap_node_mass_update_batch_finished() {
  if ($success) {
    drupal_set_message(t('The update has been performed.'));
  }
  else {
    drupal_set_message(t('An error occurred and processing did not complete.'), 'error');
    $message = format_plural(count($results), '1 item successfully processed:', '@count items successfully processed:');
    $message .= theme('item_list', $results);
    drupal_set_message($message);
  }
}

/**
 * Get the sitemap link status of a node.
 *
 * @param $node
 *   A node object.
 * @return
 *   TRUE if the node is viewable by anonymous users and it has not been
 *   manually excluded from the sitemap, otherwise FALSE.
 */
function xmlsitemap_node_get_status($node) {
  $status = isset($node->nid);
  if ($status) {
    $status &= node_access('view', $node, drupal_anonymous_user());
    //$status &= (isset($node->xmlsitemap['status']) ? $node->xmlsitemap['status'] : TRUE);
  }
  return $status;
}

/**
 * Fetch all the timestamps for when a node was changed.
 *
 * @param $node
 *   A node object.
 * @return
 *   An array of UNIX timestamp integers.
 */
function xmlsitemap_node_get_timestamps($node) {
  static $timestamps = array();

  if (!isset($timestamps[$node->nid])) {
    $timestamps[$node->nid] = array();
    $query = db_query("SELECT c.timestamp FROM {comments} c WHERE c.nid = %d AND c.status = %d UNION ALL SELECT nr.timestamp FROM {node_revisions} nr WHERE nr.nid = %d", $node->nid, COMMENT_PUBLISHED, $node->nid);
    while ($timestamp = db_result($query)) {
      $timestamps[$node->nid][] = (int) $timestamp;
    }
  }

  return $timestamps[$node->nid];
}

/**
 * Create a sitemap link from a node.
 *
 * The link will be saved as $node->xmlsitemap.
 *
 * @param $node
 *   A node object.
 */
function xmlsitemap_node_create_link(&$node) {
  if (!isset($node->nid)) {
    // Handle new nodes that do not have a value for nid yet.
    $node->nid = NULL;
  }

  if (!isset($node->xmlsitemap)) {
    $node->xmlsitemap = array();
  }

  $node->xmlsitemap += array(
    'type' => 'node',
    'id' => $node->nid,
    'loc' => 'node/'. $node->nid,
    'status' => xmlsitemap_node_get_status($node),
    'priority' => XMLSITEMAP_PRIORITY_DEFAULT,
    'lastmod' => isset($node->changed) ? $node->changed : REQUEST_TIME,
    'changefreq' => xmlsitemap_calculate_changefreq(xmlsitemap_node_get_timestamps($node)),
    'changecount' => count(xmlsitemap_node_get_timestamps($node)) - 1,
  );
}
