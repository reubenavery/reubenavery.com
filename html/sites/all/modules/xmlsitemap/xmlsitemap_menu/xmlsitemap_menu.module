<?php
// $Id: xmlsitemap_menu.module,v 1.1.4.13.2.18 2009/05/02 17:43:19 davereid Exp $

/**
 * Implementation of hook_cron().
 *
 * Process old menu links not found in the {xmlsitemap} table.
 */
function xmlsitemap_menu_cron() {
  if ($menus = array_filter(xmlsitemap_menu_var('menus'))) {
    // Set the global user variable to the anonymous user.
    xmlsitemap_switch_user(drupal_anonymous_user());

    $sql = "SELECT ml.mlid FROM {menu_links} ml LEFT JOIN {xmlsitemap} x ON ml.mlid = x.id WHERE COALESCE(x.type, 'menu') = 'menu' AND x.id IS NULL AND ml.external = 0 AND ml.hidden = 0 AND ml.menu_name IN (" . db_placeholders($menus, 'varchar') . ")";
    $query = db_query_range($sql, $menus, 0, xmlsitemap_var('batch_limit'));

    while ($mlid = db_result($query)) {
      $menu_item = menu_link_load($mlid);
      $link = xmlsitemap_menu_create_link($menu_item);
      xmlsitemap_save_link($link);
    }

    // Set the global user variable back to the original user.
    xmlsitemap_switch_user();
  }
}

/**
 * Implementation of hook_xmlsitemap_links().
 */
function xmlsitemap_menu_xmlsitemap_links($offset = 0, $limit = 0) {
  $links = array();

  if ($menus = array_filter(xmlsitemap_menu_var('menus'))) {
    // Set the global user variable to the anonymous user.
    xmlsitemap_switch_user(drupal_anonymous_user());

    $sql = "SELECT ml.mlid FROM {menu_links} ml WHERE ml.mlid > %d AND ml.external = 0 AND ml.hidden = 0 AND ml.menu_name IN (" . db_placeholders($menus, 'varchar') . ") ORDER BY ml.mlid";
    $args = array_merge(array($offset), $menus);
    $query = ($limit ? db_query_range($sql, $args, 0, $limit) : db_query($sql, $args));

    while ($mlid = db_result($query)) {
      $menu_item = menu_link_load($mlid);
      $links[] = xmlsitemap_menu_create_link($menu_item);
    }

    // Set the global user variable back to the original user.
    xmlsitemap_switch_user();
  }

  return $links;
}

/**
 * Implementation of hook_xmlsitemap_links_batch().
 */
function xmlsitemap_menu_xmlsitemap_links_batch(&$context) {
  if (!isset($context['sandbox']['progress'])) {
    $context['sandbox']['progress'] = 0;
    $context['sandbox']['current_mlid'] = 0;
    $menus = array_filter(xmlsitemap_menu_var('menus'));
    $context['sandbox']['max'] = $menus ? db_result(db_query("SELECT COUNT(ml.mlid) FROM {menu_links} ml WHERE ml.external = 0 AND ml.hidden = 0 AND ml.menu_name IN (" . db_placeholders($menus, 'varchar') . ")", $menus)) : 0;
  }

  $links = xmlsitemap_menu_xmlsitemap_links($context['sandbox']['current_mlid'], xmlsitemap_var('batch_limit'));
  foreach ($links as $link) {
    xmlsitemap_save_link($link);
    $context['sandbox']['progress']++;
    $context['sandbox']['current_mlid'] = $link['id'];
    $context['message'] = t('Processing menu link @mlid', array('@mlid' => $link['id']));
  }

  // Inform the batch engine that we are not finished,
  // and provide an estimation of the completion level we reached.
  if ($context['sandbox']['progress'] != $context['sandbox']['max']) {
    $context['finished'] = $context['sandbox']['progress'] / $context['sandbox']['max'];
  }
}

/**
 * Implementation of hook_xmlsitemap_links_clear().
 */
function xmlsitemap_menu_xmlsitemap_links_clear() {
  db_query("DELETE FROM {xmlsitemap} WHERE type = 'menu'");
}

/**
 * Implementation of hook_form_FORM_ID_alter().
 */
function xmlsitemap_menu_form_menu_edit_item_alter(&$form, $form_state) {
  //$form['#submit'][] = 'xmlsitemap_menu_menu_edit_item_submit';
}

/**
 * Create a sitemap link from a menu item.
 *
 * @param $menu_item
 *   A loaded menu item.
 */
function xmlsitemap_menu_create_link($menu_item) {
  return array(
    'type' => 'menu',
    'id' => $menu_item['mlid'],
    'loc' => $menu_item['link_path'],
    'priority' => xmlsitemap_menu_get_priority($menu_item),
    'status' => $menu_item['access'] && !preg_match('%\Anode/\d+\Z%i', $menu_item['link_path']),
  );
}

/**
 * Calculate the priority of a menu link.
 */
function xmlsitemap_menu_get_priority($menu_item) {
  if (xmlsitemap_menu_var('calculate_priority')) {
    $priority = (MENU_MAX_DEPTH - $menu_item['depth'] + 1) / MENU_MAX_DEPTH;
    $priority -= (50 + $menu_item['weight']) / (100 * (MENU_MAX_DEPTH + 1));
    return $priority;
  }
  else {
    return XMLSITEMAP_PRIORITY_DEFAULT;
  }
}

/**
 * Implementation of hok_form_FORM_ID_alter().
 */
function xmlsitemap_menu_form_xmlsitemap_settings_form_alter(&$form, $form_state) {
  $form['menu'] = array(
    '#type' => 'fieldset',
    '#title' => t('Menus'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['menu']['xmlsitemap_menu_menus'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Menus to include in the sitemap'),
    '#options' => menu_get_menus(),
    '#default_value' => xmlsitemap_menu_var('menus'),
    '#suffix' => '<hr />',
  );
  $form['menu']['xmlsitemap_menu_calculate_priority'] = array(
    '#type' => 'checkbox',
    '#title' => t('Calculate priority based on menu item depth and weight.'),
    '#default_value' => xmlsitemap_menu_var('calculate_priority'),
  );

  array_unshift($form['#submit'], 'xmlsitemap_menu_settings_form_submit');
}

/**
 * Submit handler; Remove links from de-selected menus.
 */
function xmlsitemap_menu_settings_form_submit($form, $form_state) {
  $current_menus = xmlsitemap_menu_var('menus');
  $selected_menus = $form_state['values']['xmlsitemap_menu_menus'];
  $removed_menus = array_diff($current_menus, $selected_menus);

  foreach ($removed_menus as $removed_menu) {
    db_query("DELETE FROM {xmlsitemap} WHERE type = 'menu' AND id IN (SELECT mlid FROM {menu_links} WHERE menu_name = '%s')", $removed_menu);
  }
}

/**
 * Internal default variables for template_var().
 */
function xmlsitemap_menu_variables() {
  return array(
    'xmlsitemap_menu_menus' => array(),
    'xmlsitemap_menu_calculate_priority' => FALSE,
  );
}

/**
 * Internal implementation of variable_get().
 */
function xmlsitemap_menu_var($name, $default = NULL) {
  static $defaults = NULL;
  if (!isset($defaults)) {
    $defaults = xmlsitemap_menu_variables();
  }

  $name = 'xmlsitemap_menu_'. $name;

  // @todo Remove when stable.
  if (!isset($defaults[$name])) {
    trigger_error(t('Default variable for %variable not found.', array('%variable' => $name)));
  }

  return variable_get($name, isset($default) || !isset($defaults[$name]) ? $default : $defaults[$name]);
}
